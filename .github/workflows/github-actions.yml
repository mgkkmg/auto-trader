# github repository Actions 페이지에 나타낼 이름
name: CI/CD

# event trigger
on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

    ## jdk setting
    - uses: actions/checkout@v3
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin' # https://github.com/actions/setup-java

    ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    ## gradle build
    - name: Build with Gradle
      run: ./gradlew clean :trader-api:buildNeeded --stacktrace --info --refresh-dependencies -x test

    ## docker build & push to production
    - name: Docker build & push to prod
      if: contains(github.ref, 'main')
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f ./trader-api/Dockerfile -t ${{ secrets.DOCKER_REPO }}/trader-api .
        docker push ${{ secrets.DOCKER_REPO }}/trader-api

    ## AWS EC2에 접속하고 develop을 배포합니다.
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      env:
        COMPOSE: "/home/ubuntu/docker/docker-compose.yml"
      if: contains(github.ref, 'main')
      with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          envs: COMPOSE
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker rmi -f $(docker images -q)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/trader-api
            sudo docker-compose -f $COMPOSE up --build
            sudo docker image prune -f
